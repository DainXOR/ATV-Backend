package controller

import (
	"dainxor/atv/configs"
	"dainxor/atv/service"
	"fmt"

	"github.com/gin-gonic/gin"
)

func VulnerabilityTypesRoutes(router *gin.Engine) {
	rv := configs.App.RoutesVersion()
	beforeRoute := fmt.Sprintf("/api/v%d/vulnerability-type", rv-1)
	lastRoute := fmt.Sprintf("/api/v%d/vulnerability-types", rv)

	vulnerabilityTypeRouterOld := router.Group(beforeRoute)
	{
		vulnerabilityTypeRouterOld.POST("/", service.VulnerabilityType.Create)

		vulnerabilityTypeRouterOld.GET("/:id", service.VulnerabilityType.GetByID)
		vulnerabilityTypeRouterOld.GET("/all", service.VulnerabilityType.GetAll)

		vulnerabilityTypeRouterOld.PUT("/:id", service.VulnerabilityType.UpdateByID)

		vulnerabilityTypeRouterOld.PATCH("/:id", service.VulnerabilityType.PatchByID)

		vulnerabilityTypeRouterOld.DELETE("/:id", service.VulnerabilityType.DeleteByID)
	}

	//router.Group(beforeRoute).Any("", func(ctx *gin.Context) {
	//	ctx.JSON(types.Http.C300().PermanentRedirect(),
	//		types.EmptyResponse(
	//			logger.DeprecateMsg(types.V("0.2.0"), types.V("0.3.0"), "Use", lastRoute, "instead"),
	//		),
	//	)
	//	ctx.Redirect(types.Http.C300().PermanentRedirect(), lastRoute)
	//})

	vulnerabilityTypeRouter := router.Group(lastRoute)
	{
		vulnerabilityTypeRouter.POST("/", service.VulnerabilityType.Create)

		vulnerabilityTypeRouter.GET("/:id", service.VulnerabilityType.GetByID)
		vulnerabilityTypeRouter.GET("/all", service.VulnerabilityType.GetAll)

		vulnerabilityTypeRouter.PUT("/:id", service.VulnerabilityType.UpdateByID)

		vulnerabilityTypeRouter.PATCH("/:id", service.VulnerabilityType.PatchByID)

		vulnerabilityTypeRouter.DELETE("/:id", service.VulnerabilityType.DeleteByID)
	}
}
